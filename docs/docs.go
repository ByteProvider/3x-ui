// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/backuptotgbot": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Send a backup of the panel database to Telegram bot admins",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "backup"
                ],
                "summary": "Send backup to Telegram",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/add": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new inbound with specified configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Add new inbound",
                "parameters": [
                    {
                        "description": "Inbound configuration",
                        "name": "inbound",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Inbound"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entity.Msg"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "obj": {
                                            "$ref": "#/definitions/model.Inbound"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/addClient": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Add a new client to an existing inbound configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Add client to inbound",
                "parameters": [
                    {
                        "description": "Client data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Inbound"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/clearClientIps/{email}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Clear all recorded IP addresses for a specific client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Clear client IP addresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client email address",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/clientIps/{email}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve IP addresses recorded for a specific client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Get client IP addresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client email address",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/del/{id}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete an inbound by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Delete inbound",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Inbound ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/delDepletedClients/{id}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Remove all clients who have exhausted their traffic limits",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Delete depleted clients",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Inbound ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/get/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get detailed information about a specific inbound",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Get inbound by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Inbound ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entity.Msg"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "obj": {
                                            "$ref": "#/definitions/model.Inbound"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/getClientTraffics/{email}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get traffic statistics for a specific client by email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Get client traffic by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client email address",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entity.Msg"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "obj": {
                                            "$ref": "#/definitions/xray.ClientTraffic"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/getClientTrafficsById/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get traffic statistics for all clients in a specific inbound",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Get client traffic by inbound ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inbound ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entity.Msg"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "obj": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/xray.ClientTraffic"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Import an inbound configuration from JSON data",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Import inbound",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Inbound JSON data",
                        "name": "data",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entity.Msg"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "obj": {
                                            "$ref": "#/definitions/model.Inbound"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/lastOnline": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get last online timestamps for all clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Get last online times",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/list": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get list of all inbounds for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "List all inbounds",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entity.Msg"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "obj": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Inbound"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/onlines": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get list of currently online clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Get online clients",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/resetAllClientTraffics/{id}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Reset traffic counters for all clients in a specific inbound",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Reset all client traffics",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Inbound ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/resetAllTraffics": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Reset traffic counters for all inbounds and clients",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Reset all traffics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/update/{id}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing inbound configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Update inbound",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Inbound ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated inbound configuration",
                        "name": "inbound",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Inbound"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entity.Msg"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "obj": {
                                            "$ref": "#/definitions/model.Inbound"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/updateClient/{clientId}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update configuration for a specific client in an inbound",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Update inbound client",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "clientId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated client data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Inbound"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/updateClientTraffic/{email}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Manually update traffic statistics for a specific client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Update client traffic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Traffic data",
                        "name": "traffic",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/{id}/delClient/{clientId}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Remove a client from an inbound by client ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Delete client from inbound",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Inbound ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client ID",
                        "name": "clientId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/{id}/delClientByEmail/{email}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Remove a client from an inbound by email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Delete client by email",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Inbound ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client email address",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/inbounds/{id}/resetClientTraffic/{email}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Reset traffic counter for a specific client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Reset client traffic",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Inbound ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/panel/api/inbounds/addClientWithLink": {
            "post": {
                "description": "Add a new client with only email and inbound ID - other fields are auto-generated. Returns the connection link (vless://, vmess://, trojan://, ss://)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inbounds"
                ],
                "summary": "Add client to inbound with link (simplified)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key for authentication",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Client request with email and inbound ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.AddClientRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns link, email, and client details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entity.Msg"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "obj": {
                                            "type": "object",
                                            "additionalProperties": true
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/cpuHistory/{bucket}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get aggregated CPU usage history for the specified time bucket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Get CPU usage history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Time bucket in seconds (2, 30, 60, 120, 180)",
                        "name": "bucket",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/getConfigJson": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the current Xray configuration in JSON format",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Get Xray config JSON",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/getDb": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Download the panel database file as backup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Download database",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/getNewEchCert": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate a new Encrypted Client Hello (ECH) certificate",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Generate ECH certificate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server Name Indication",
                        "name": "sni",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/getNewUUID": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate a new UUID for client identification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Generate UUID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/getNewVlessEnc": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate a new VLESS encryption key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Generate VLESS encryption key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/getNewX25519Cert": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate a new X25519 key pair for Reality protocol",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Generate X25519 certificate",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/getNewmldsa65": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate a new ML-DSA-65 key pair for post-quantum cryptography",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Generate ML-DSA-65 key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/getNewmlkem768": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate a new ML-KEM-768 key pair for post-quantum cryptography",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Generate ML-KEM-768 key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/getXrayVersion": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get list of available Xray versions for installation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Get Xray versions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/importDB": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Import a database file to restore panel configuration",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Import database",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Database file to import",
                        "name": "db",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/installXray/{version}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Install or update Xray to a specific version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Install or update Xray",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Xray version to install",
                        "name": "version",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/logs/{count}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve application logs with optional filtering",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Get application logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Number of log lines to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Log level filter",
                        "name": "level",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Syslog filter",
                        "name": "syslog",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/restartXrayService": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Restart the Xray service to apply configuration changes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Restart Xray service",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get current server status including CPU, memory, disk usage and Xray status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Get server status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/entity.Msg"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "obj": {
                                            "$ref": "#/definitions/service.Status"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/stopXrayService": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Stop the running Xray service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Stop Xray service",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/updateGeofile": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update geoip or geosite database file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Update geo file",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/updateGeofile/{fileName}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update geoip or geosite database file",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Update geo file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Geo file name (optional)",
                        "name": "fileName",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        },
        "/server/xraylogs/{count}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve Xray logs with filtering for traffic types",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "server"
                ],
                "summary": "Get Xray logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Number of log lines to retrieve",
                        "name": "count",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search filter",
                        "name": "filter",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Show direct traffic logs",
                        "name": "showDirect",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Show blocked traffic logs",
                        "name": "showBlocked",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Show proxy traffic logs",
                        "name": "showProxy",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.Msg"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.AddClientRequest": {
            "type": "object",
            "required": [
                "email",
                "inboundId"
            ],
            "properties": {
                "email": {
                    "description": "Client email",
                    "type": "string"
                },
                "expiryTime": {
                    "description": "Expiration time in milliseconds (0 for no expiration)",
                    "type": "integer"
                },
                "inboundId": {
                    "description": "Inbound ID",
                    "type": "integer"
                },
                "limitIp": {
                    "description": "IP limit (0 for unlimited)",
                    "type": "integer"
                },
                "subId": {
                    "description": "Subscription ID",
                    "type": "string"
                },
                "tgId": {
                    "description": "Telegram ID",
                    "type": "integer"
                },
                "totalGB": {
                    "description": "Total traffic in GB (0 for unlimited)",
                    "type": "integer"
                }
            }
        },
        "entity.Msg": {
            "type": "object",
            "properties": {
                "msg": {
                    "description": "Response message text",
                    "type": "string"
                },
                "obj": {
                    "description": "Optional data object"
                },
                "success": {
                    "description": "Indicates if the operation was successful",
                    "type": "boolean"
                }
            }
        },
        "model.Inbound": {
            "type": "object",
            "properties": {
                "allTime": {
                    "description": "All-time traffic usage",
                    "type": "integer"
                },
                "clientStats": {
                    "description": "Client traffic statistics",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/xray.ClientTraffic"
                    }
                },
                "down": {
                    "description": "Download traffic in bytes",
                    "type": "integer"
                },
                "enable": {
                    "description": "Whether the inbound is enabled",
                    "type": "boolean"
                },
                "expiryTime": {
                    "description": "Expiration timestamp",
                    "type": "integer"
                },
                "id": {
                    "description": "Unique identifier",
                    "type": "integer"
                },
                "lastTrafficResetTime": {
                    "description": "Last traffic reset timestamp",
                    "type": "integer"
                },
                "listen": {
                    "description": "Xray configuration fields",
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "$ref": "#/definitions/model.Protocol"
                },
                "remark": {
                    "description": "Human-readable remark",
                    "type": "string"
                },
                "settings": {
                    "type": "string"
                },
                "sniffing": {
                    "type": "string"
                },
                "streamSettings": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "total": {
                    "description": "Total traffic limit in bytes",
                    "type": "integer"
                },
                "trafficReset": {
                    "description": "Traffic reset schedule",
                    "type": "string"
                },
                "up": {
                    "description": "Upload traffic in bytes",
                    "type": "integer"
                }
            }
        },
        "model.Protocol": {
            "type": "string",
            "enum": [
                "vmess",
                "vless",
                "tunnel",
                "http",
                "trojan",
                "shadowsocks",
                "mixed",
                "wireguard"
            ],
            "x-enum-varnames": [
                "VMESS",
                "VLESS",
                "Tunnel",
                "HTTP",
                "Trojan",
                "Shadowsocks",
                "Mixed",
                "WireGuard"
            ]
        },
        "service.ProcessState": {
            "type": "string",
            "enum": [
                "running",
                "stop",
                "error"
            ],
            "x-enum-comments": {
                "Error": "Process is in error state",
                "Running": "Process is running normally",
                "Stop": "Process is stopped"
            },
            "x-enum-descriptions": [
                "Process is running normally",
                "Process is stopped",
                "Process is in error state"
            ],
            "x-enum-varnames": [
                "Running",
                "Stop",
                "Error"
            ]
        },
        "service.Status": {
            "type": "object",
            "properties": {
                "appStats": {
                    "type": "object",
                    "properties": {
                        "mem": {
                            "type": "integer"
                        },
                        "threads": {
                            "type": "integer"
                        },
                        "uptime": {
                            "type": "integer"
                        }
                    }
                },
                "cpu": {
                    "type": "number"
                },
                "cpuCores": {
                    "type": "integer"
                },
                "cpuSpeedMhz": {
                    "type": "number"
                },
                "disk": {
                    "type": "object",
                    "properties": {
                        "current": {
                            "type": "integer"
                        },
                        "total": {
                            "type": "integer"
                        }
                    }
                },
                "loads": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "logicalPro": {
                    "type": "integer"
                },
                "mem": {
                    "type": "object",
                    "properties": {
                        "current": {
                            "type": "integer"
                        },
                        "total": {
                            "type": "integer"
                        }
                    }
                },
                "netIO": {
                    "type": "object",
                    "properties": {
                        "down": {
                            "type": "integer"
                        },
                        "up": {
                            "type": "integer"
                        }
                    }
                },
                "netTraffic": {
                    "type": "object",
                    "properties": {
                        "recv": {
                            "type": "integer"
                        },
                        "sent": {
                            "type": "integer"
                        }
                    }
                },
                "publicIP": {
                    "type": "object",
                    "properties": {
                        "ipv4": {
                            "type": "string"
                        },
                        "ipv6": {
                            "type": "string"
                        }
                    }
                },
                "swap": {
                    "type": "object",
                    "properties": {
                        "current": {
                            "type": "integer"
                        },
                        "total": {
                            "type": "integer"
                        }
                    }
                },
                "tcpCount": {
                    "type": "integer"
                },
                "udpCount": {
                    "type": "integer"
                },
                "uptime": {
                    "type": "integer"
                },
                "xray": {
                    "type": "object",
                    "properties": {
                        "errorMsg": {
                            "type": "string"
                        },
                        "state": {
                            "$ref": "#/definitions/service.ProcessState"
                        },
                        "version": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "xray.ClientTraffic": {
            "type": "object",
            "properties": {
                "allTime": {
                    "type": "integer"
                },
                "down": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "enable": {
                    "type": "boolean"
                },
                "expiryTime": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "inboundId": {
                    "type": "integer"
                },
                "lastOnline": {
                    "type": "integer"
                },
                "reset": {
                    "type": "integer"
                },
                "subId": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                },
                "up": {
                    "type": "integer"
                },
                "uuid": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
